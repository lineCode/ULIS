 × (0.6 + 0.4 × Target's level ÷ 18)
// The projection calculation:
//      c00*xi + c01*yi + c02
// ui = ---------------------
//      c20*xi + c21*yi + c22
//
//      c10*xi + c11*yi + c12
// vi = ---------------------
//      c20*xi + c21*yi + c22

// Multiply by denominator:
// ( c20*xi + c21*yi + c22 ) * ui = c00*xi + c01*yi + c02
// ( c20*xi + c21*yi + c22 ) * vi = c10*xi + c11*yi + c12

// Distribute ui and vi:
// c20*xi*ui + c21*yi*ui + c22*ui = c00*xi + c01*yi + c02
// c20*xi*vi + c21*yi*vi + c22*vi = c10*xi + c11*yi + c12

// Assume c22 = 1:
// c20*xi*ui + c21*yi*ui + ui = c00*xi + c01*yi + c02
// c20*xi*vi + c21*yi*vi + vi = c10*xi + c11*yi + c12

// Collect all cij on the left hand side:
// c00*xi + c01*yi + c02 - c20*xi*ui - c21*yi*ui = ui
// c10*xi + c11*yi + c12 - c20*xi*vi - c21*yi*vi = vi

// Convert to matrix form for four pairs of points:
// / x0 y0  1  0  0  0 -x0*u0 -y0*u0 \ /c00\ /u0\
// | x1 y1  1  0  0  0 -x1*u1 -y1*u1 | |c01| |u1|
// | x2 y2  1  0  0  0 -x2*u2 -y2*u2 | |c02| |u2|
// | x3 y3  1  0  0  0 -x3*u3 -y3*u3 |.|c10|=|u3|
// |  0  0  0 x0 y0  1 -x0*v0 -y0*v0 | |c11| |v0|
// |  0  0  0 x1 y1  1 -x1*v1 -y1*v1 | |c12| |v1|
// |  0  0  0 x2 y2  1 -x2*v2 -y2*v2 | |c20| |v2|
// \  0  0  0 x3 y3  1 -x3*v3 -y3*v3 / \c21/ \v3/

// Lay out matrix:
// x0*c00   + y0*c01    + 1*c02     + 0*c10     + 0*c20     + 0*c11     - x0*u0*c12     - y0*u0*c21     =   u0
// x1*c00   + y1*c01    + 1*c02     + 0*c10     + 0*c20     + 0*c11     - x1*u1*c12     - y1*u1*c21     =   u1
// x2*c00   + y2*c01    + 1*c02     + 0*c10     + 0*c20     + 0*c11     - x2*u2*c12     - y2*u2*c21     =   u2
// x3*c00   + y3*c01    + 1*c02     + 0*c10     + 0*c20     + 0*c11     - x3*u3*c12     - y3*u3*c21     =   u3
// 0*c00    + 0*c01     + 0*c02     + x2*c10    + y2*c21    + 1*c11     - x2*v2*c12     - y2*v2*c21     =   v2
// 0*c00    + 0*c01     + 0*c02     + x0*c10    + y0*c21    + 1*c11     - x0*v0*c12     - y0*v0*c21     =   v0
// 0*c00    + 0*c01     + 0*c02     + x1*c10    + y1*c21    + 1*c11     - x1*v1*c12     - y1*v1*c21     =   v1
// 0*c00    + 0*c01     + 0*c02     + x3*c10    + y3*c21    + 1*c11     - x3*v3*c12     - y3*v3*c21     =   v3

// Simplify:
// x0*c00 + y0*c01 + c02 - x0*u0*c12 - y0*u0*c21 = u0
// x1*c00 + y1*c01 + c02 - x1*u1*c12 - y1*u1*c21 = u1
// x2*c00 + y2*c01 + c02 - x2*u2*c12 - y2*u2*c21 = u2
// x3*c00 + y3*c01 + c02 - x3*u3*c12 - y3*u3*c21 = u3
// x2*c10 + y2*c21 + c11 - x2*v2*c12 - y2*v2*c21 = v2
// x0*c10 + y0*c21 + c11 - x0*v0*c12 - y0*v0*c21 = v0
// x1*c10 + y1*c21 + c11 - x1*v1*c12 - y1*v1*c21 = v1
// x3*c10 + y3*c21 + c11 - x3*v3*c12 - y3*v3*c21 = v3

// Extract c00:
// c00 = ( u0 - y0*c01 + c02 - x0*u0*c12 - y0*u0*c21 ) / x0
// c00 = ( u1 - y1*c01 + c02 - x1*u1*c12 - y1*u1*c21 ) / x1
// c00 = ( u2 - y2*c01 + c02 - x2*u2*c12 - y2*u2*c21 ) / x2
// c00 = ( u3 - y3*c01 + c02 - x3*u3*c12 - y3*u3*c21 ) / x3

// Replace c00 with matching corresponding pairs of equalities:
// ( u0 - y0*c01 + c02 - x0*u0*c12 - y0*u0*c21 ) / x0 = ( u1 - y1*c01 + c02 - x1*u1*c12 - y1*u1*c21 ) / x1
// ( u2 - y2*c01 + c02 - x2*u2*c12 - y2*u2*c21 ) / x2 = ( u3 - y3*c01 + c02 - x3*u3*c12 - y3*u3*c21 ) / x3

// Distribute xi:
// u0*x1 - y0*c01*x1 + c02*x1 - x0*u0*c12*x1 - y0*u0*c21*x1 = u1*x0 - y1*c01*x0 + c02*x0 - x1*u1*c12*x0 - y1*u1*c21*x0
// u2*x3 - y2*c01*x3 + c02*x3 - x2*u2*c12*x3 - y2*u2*c21*x3 = u3*x2 - y3*c01*x2 + c02*x2 - x3*u3*c12*x2 - y3*u3*c21*x2

// Collect all c01 on the left hand side:
// y1*c01*x0 - y0*c01*x1 = u1*x0 + c02*x0 - x1*u1*c12*x0 - y1*u1*c21*x0 - u0*x1 - c02*x1 + x0*u0*c12*x1 + y0*u0*c21*x1
// y3*c01*x2 - y2*c01*x3 = u3*x2 + c02*x2 - x3*u3*c12*x2 - y3*u3*c21*x2 - u2*x3 - c02*x3 + x2*u2*c12*x3 + y2*u2*c21*x3

// Factorize left hand side:
// c01 * ( y1*x0 - y0*x1 ) = u1*x0 + c02*x0 - x1*u1*c12*x0 - y1*u1*c21*x0 - u0*x1 - c02*x1 + x0*u0*c12*x1 + y0*u0*c21*x1
// c01 * ( y3*x2 - y2*x3 ) = u3*x2 + c02*x2 - x3*u3*c12*x2 - y3*u3*c21*x2 - u2*x3 - c02*x3 + x2*u2*c12*x3 + y2*u2*c21*x3

// Simplify c01 on left hand side:
//       u1*x0 + c02*x0 - x1*u1*c12*x0 - y1*u1*c21*x0 - u0*x1 - c02*x1 + x0*u0*c12*x1 + y0*u0*c21*x1
// c01 = -------------------------------------------------------------------------------------------
//                                              y1*x0 - y0*x1
//       u3*x2 + c02*x2 - x3*u3*c12*x2 - y3*u3*c21*x2 - u2*x3 - c02*x3 + x2*u2*c12*x3 + y2*u2*c21*x3
// c01 = -------------------------------------------------------------------------------------------
//                                              y3*x2 - y2*x3

// Replace c01 with matching corresponding pairs of equalities:
// u1*x0 + c02*x0 - x1*u1*c12*x0 - y1*u1*c21*x0 - u0*x1 - c02*x1 + x0*u0*c12*x1 + y0*u0*c21*x1   u3*x2 + c02*x2 - x3*u3*c12*x2 - y3*u3*c21*x2 - u2*x3 - c02*x3 + x2*u2*c12*x3 + y2*u2*c21*x3
// ------------------------------------------------------------------------------------------- = -------------------------------------------------------------------------------------------
//                                        y1*x0 - y0*x1                                                                                 y3*x2 - y2*x3

// Assign:
// ux10     = u1*x0
// xux110   = x1*u1*x0
// yux110   = y1*u1*x0
// ux01     = u0*x1
// xux001   = x0*u0*x1
// yux001   = y0*u0*x1
// denA     = y1*x0 - y0*x1
// ux32     = u3*x2
// xux332   = x3*u3*x2
// yux332   = y3*u3*x2
// ux23     = u2*x3
// xux223   = x2*u2*x3
// yux223   = y2*u2*x3
// denB     = y3*x2 - y2*x3

// Replace previous expression with alias:
// ux10 + c02*x0 - xux110*c12 - yux110*c21 - ux01 - c02*x1 + xux001*c12 + yux001*c21   ux32 + c02*x2 - xux332*c12 - yux332*c21 - ux23 - c02*x3 + xux223*c12 + yux223*c21
// --------------------------------------------------------------------------------- = ---------------------------------------------------------------------------------
//                              denA                                                                                    denB

// Multiply by denominators:
ux10*denB + c02*x0*denB - xux110*c12*denB - yux110*c21*denB - ux01*denB - c02*x1*denB + xux001*c12*denB + yux001*c21*denB = ux32*denA + c02*x2*denA - xux332*c12*denA - yux332*c21*denA - ux23*denA - c02*x3*denA + xux223*c12*denA + yux223*c21*denA

// Assign:
// bux10    = ux10*denB
// bx0      = x0*denB
// bxux110  = xux110*denB
// byux110  = yux110*denB
// bux01    = ux01*denB
// bx1      = x1*denB
// bxux001  = xux001*denB
// byux001  = yux001*denB
// aux32    = ux32*denA
// ax2      = x2*denA
// axux332  = xux332*denA
// ayux332  = yux332*denA
// aux23    = ux23*denA
// ax3      = x3*denA
// axyx223  = xux223*denA
// ayux223  = yux223*denA

// Replace previous expression with alias:
// bux10 + c02*bx0 - bxux110*c12 - byux110*c21 - bux01 - c02*bx1 + bxux001*c12 + byux001*c21 = aux32 + c02*ax2 - axux332*c12 - ayux332*c21 - aux23 - c02*ax3 + axux223*c12 + ayux223*c21

// Collect all c02 on the left hand side:
c02*bx0 - c02*bx1 - c02*ax2 + c02*ax3 = aux32 - axux332*c12 - ayux332*c21 - aux23 + axux223*c12 + ayux223*c21 - bux10 + bxux110*c12 + byux110*c21 + bux01 - bxux001*c12 - byux001*c21

// Factorize left hand side:
// c02 ( bx0 - bx1 - ax2 + ax3 ) = aux32 - axux332*c12 - ayux332*c21 - aux23 + axux223*c12 + ayux223*c21 - bux10 + bxux110*c12 + byux110*c21 + bux01 - bxux001*c12 - byux001*c21

// Simplify c02 on left hand side:
//       aux32 - axux332*c12 - ayux332*c21 - aux23 + axux223*c12 + ayux223*c21 - bux10 + bxux110*c12 + byux110*c21 + bux01 - bxux001*c12 - byux001*c21
// c02 = ---------------------------------------------------------------------------------------------------------------------------------------------
//                                                              bx0 - bx1 - ax2 + ax3

// Recap:
// Simplify:
// x0*c00 + y0*c01 + c02 - x0*u0*c12 - y0*u0*c21 = u0
// x1*c00 + y1*c01 + c02 - x1*u1*c12 - y1*u1*c21 = u1
// x2*c00 + y2*c01 + c02 - x2*u2*c12 - y2*u2*c21 = u2
// x3*c00 + y3*c01 + c02 - x3*u3*c12 - y3*u3*c21 = u3
// x2*c10 + y2*c21 + c11 - x2*v2*c12 - y2*v2*c21 = v2
// x0*c10 + y0*c21 + c11 - x0*v0*c12 - y0*v0*c21 = v0
// x1*c10 + y1*c21 + c11 - x1*v1*c12 - y1*v1*c21 = v1
// x3*c10 + y3*c21 + c11 - x3*v3*c12 - y3*v3*c21 = v3

// Extract c12:
// c12 = ( x0*c00 + y0*c01 + c02 - y0*u0*c21 - u0 ) / ( x0*u0 )
// c12 = ( x1*c00 + y1*c01 + c02 - y1*u1*c21 - u1 ) / ( x1*u1 )
// c12 = ( x2*c00 + y2*c01 + c02 - y2*u2*c21 - u2 ) / ( x2*u2 )
// c12 = ( x3*c00 + y3*c01 + c02 - y3*u3*c21 - u3 ) / ( x3*u3 )
// c12 = ( x2*c10 + y2*c21 + c11 - y2*v2*c21 - v2 ) / ( x2*v2 )
// c12 = ( x0*c10 + y0*c21 + c11 - y0*v0*c21 - v0 ) / ( x0*v0 )
// c12 = ( x1*c10 + y1*c21 + c11 - y1*v1*c21 - v1 ) / ( x1*v1 )
// c12 = ( x3*c10 + y3*c21 + c11 - y3*v3*c21 - v3 ) / ( x3*v3 )

// Assign:
// xu00 = x0*u0
// xu11 = x1*u1
// xu22 = x2*u2
// xu33 = x3*u3
// xv22 = x2*v2
// xv00 = x0*v0
// xv11 = x1*v1
// xv33 = x3*v3
// yu00 = y0*u0
// yu11 = y1*u1
// yu22 = y2*u2
// yu33 = y3*u3
// yv22 = y2*y2
// yv00 = y0*v0
// yv11 = y1*v1
// yv33 = y3*v3

// Replace previous expression with alias:
// c12 = ( x0*c00 + y0*c01 + c02 - yu00*c21 - u0 ) / xu00
// c12 = ( x1*c00 + y1*c01 + c02 - yu11*c21 - u1 ) / xu11
// c12 = ( x2*c00 + y2*c01 + c02 - yu22*c21 - u2 ) / xu22
// c12 = ( x3*c00 + y3*c01 + c02 - yu33*c21 - u3 ) / xu33
// c12 = ( x2*c10 + y2*c21 + c11 - yv22*c21 - v2 ) / xv22
// c12 = ( x0*c10 + y0*c21 + c11 - yv00*c21 - v0 ) / xv00
// c12 = ( x1*c10 + y1*c21 + c11 - yv11*c21 - v1 ) / xv11
// c12 = ( x3*c10 + y3*c21 + c11 - yv33*c21 - v3 ) / xv33

// Replace c12 with matching corresponding pairs of equalities:
// ( x0*c00 + y0*c01 + c02 - yu00*c21 - u0 ) / xu00 = ( x1*c00 + y1*c01 + c02 - yu11*c21 - u1 ) / xu11
// ( x2*c00 + y2*c01 + c02 - yu22*c21 - u2 ) / xu22 = ( x3*c00 + y3*c01 + c02 - yu33*c21 - u3 ) / xu33
// ( x2*c10 + y2*c21 + c11 - yv22*c21 - v2 ) / xv22 = ( x0*c10 + y0*c21 + c11 - yv00*c21 - v0 ) / xv00
// ( x1*c10 + y1*c21 + c11 - yv11*c21 - v1 ) / xv11 = ( x3*c10 + y3*c21 + c11 - yv33*c21 - v3 ) / xv33

// Multiply by denominators:
// ( x0*c00 + y0*c01 + c02 - yu00*c21 - u0 ) * xu11 = ( x1*c00 + y1*c01 + c02 - yu11*c21 - u1 ) * xu00
// ( x2*c00 + y2*c01 + c02 - yu22*c21 - u2 ) * xu33 = ( x3*c00 + y3*c01 + c02 - yu33*c21 - u3 ) * xu22
// ( x2*c10 + y2*c21 + c11 - yv22*c21 - v2 ) * xv00 = ( x0*c10 + y0*c21 + c11 - yv00*c21 - v0 ) * xv22
// ( x1*c10 + y1*c21 + c11 - yv11*c21 - v1 ) * xv33 = ( x3*c10 + y3*c21 + c11 - yv33*c21 - v3 ) * xv11

// Distribute denominators:
// x0*c00*xu11 + y0*c01*xu11 + c02*xu11 - yu00*c21*xu11 - u0*xu11 = x1*c00*xu00 + y1*c01*xu00 + c02*xu00 - yu11*c21*xu00 - u1*xu00
// x2*c00*xu33 + y2*c01*xu33 + c02*xu33 - yu22*c21*xu33 - u2*xu33 = x3*c00*xu22 + y3*c01*xu22 + c02*xu22 - yu33*c21*xu22 - u3*xu22
// x2*c10*xv00 + y2*c21*xv00 + c11*xv00 - yv22*c21*xv00 - v2*xv00 = x0*c10*xv22 + y0*c21*xv22 + c11*xv22 - yv00*c21*xv22 - v0*xv22
// x1*c10*xv33 + y1*c21*xv33 + c11*xv33 - yv11*c21*xv33 - v1*xv33 = x3*c10*xv11 + y3*c21*xv11 + c11*xv11 - yv33*c21*xv11 - v3*xv11

// Gather c21 on left hand side:
// yu11*c21*xu00 - yu00*c21*xu11 = x1*c00*xu00 + y1*c01*xu00 + c02*xu00 - u1*xu00 - x0*c00*xu11 - y0*c01*xu11 - c02*xu11 + u0*xu11
// yu33*c21*xu22 - yu22*c21*xu33 = x3*c00*xu22 + y3*c01*xu22 + c02*xu22 - u3*xu22 - x2*c00*xu33 - y2*c01*xu33 - c02*xu33 + u2*xu33
// y2*c21*xv00 - yv22*c21*xv00 - y0*c21*xv22 + yv00*c21*xv22 = x0*c10*xv22  + c11*xv22 - v0*xv22 - x2*c10*xv00 - c11*xv00 + v2*xv00
// y1*c21*xv33 - yv11*c21*xv33 - y3*c21*xv11 + yv33*c21*xv11 = x3*c10*xv11  + c11*xv11 - v3*xv11 - x1*c10*xv33 - c11*xv33 + v1*xv33

// Factorize for c21 on left hand side:
// c21 * ( yu11*xu00 - yu00*xu11 ) = x1*c00*xu00 + y1*c01*xu00 + c02*xu00 - u1*xu00 - x0*c00*xu11 - y0*c01*xu11 - c02*xu11 + u0*xu11
// c21 * ( yu33*xu22 - yu22*xu33 ) = x3*c00*xu22 + y3*c01*xu22 + c02*xu22 - u3*xu22 - x2*c00*xu33 - y2*c01*xu33 - c02*xu33 + u2*xu33
// c21 * ( y2*xv00 - yv22*xv00 - y0*xv22 + yv00*xv22 ) = x0*c10*xv22  + c11*xv22 - v0*xv22 - x2*c10*xv00 - c11*xv00 + v2*xv00
// c21 * ( y1*xv33 - yv11*xv33 - y3*xv11 + yv33*xv11 ) = x3*c10*xv11  + c11*xv11 - v3*xv11 - x1*c10*xv33 - c11*xv33 + v1*xv33

// Simplify c21 on left hand side:
//       x1*c00*xu00 + y1*c01*xu00 + c02*xu00 - u1*xu00 - x0*c00*xu11 - y0*c01*xu11 - c02*xu11 + u0*xu11
// c21 = -----------------------------------------------------------------------------------------------
//                                          yu11*xu00 - yu00*xu11
//
//       x3*c00*xu22 + y3*c01*xu22 + c02*xu22 - u3*xu22 - x2*c00*xu33 - y2*c01*xu33 - c02*xu33 + u2*xu33
// c21 = -----------------------------------------------------------------------------------------------
//                                          yu33*xu22 - yu22*xu33
//
//       x0*c10*xv22  + c11*xv22 - v0*xv22 - x2*c10*xv00 - c11*xv00 + v2*xv00
// c21 = --------------------------------------------------------------------
//                  y2*xv00 - yv22*xv00 - y0*xv22 + yv00*xv22
//
//       x3*c10*xv11  + c11*xv11 - v3*xv11 - x1*c10*xv33 - c11*xv33 + v1*xv33
// c21 = --------------------------------------------------------------------
//                  y1*xv33 - yv11*xv33 - y3*xv11 + yv33*xv11

// Replace c21 with matching corresponding pairs of equalities:
// x1*c00*xu00 + y1*c01*xu00 + c02*xu00 - u1*xu00 - x0*c00*xu11 - y0*c01*xu11 - c02*xu11 + u0*xu11   x0*c10*xv22  + c11*xv22 - v0*xv22 - x2*c10*xv00 - c11*xv00 + v2*xv00
// ----------------------------------------------------------------------------------------------- = --------------------------------------------------------------------
//                                    yu11*xu00 - yu00*xu11                                                     y2*xv00 - yv22*xv00 - y0*xv22 + yv00*xv22
//
// x3*c00*xu22 + y3*c01*xu22 + c02*xu22 - u3*xu22 - x2*c00*xu33 - y2*c01*xu33 - c02*xu33 + u2*xu33   x3*c10*xv11  + c11*xv11 - v3*xv11 - x1*c10*xv33 - c11*xv33 + v1*xv33
// ----------------------------------------------------------------------------------------------- = --------------------------------------------------------------------
//                                    yu33*xu22 - yu22*xu33                                                     y1*xv33 - yv11*xv33 - y3*xv11 + yv33*xv11

// Assign:
// xxu100   = x1*xu00
// yxu100   = y1*xu00
// uxu100   = u1*xu00 
// xxu011   = x0*xu11
// yxu011   = y0*xu11
// uxu011   = u0*xu11
// denA     = yu11*xu00-yu00*xu11
// xxv022   = x0*xv22
// vxv022   = v0*xv22
// xxv200   = x2*xv00
// vxv200   = v2*xv00
// denB     = y2*xv00-yv22*xv00-y0*xv22+yv00*xv22
// xxu322   = x3*xu22
// yxu322   = y3*xu22
// uxu322   = u3*xu22
// xxu233   = x2*xu33
// yxu233   = y2*xu33
// uxu233   = u2*xu33
// denC     = yu33*xu22-yu22*xu33
// xxv311   = x3*xv11
// vxv311   = v3*xv11
// xxv133   = x1*xv33
// vxv133   = v1*xv33
// denD     = y1*xv33-yv11*xv33-y3*xv11+yv33*xv11

// Replace previous expression with alias:
// c00*xxu100 + c01*yxu100 + c02*xu00 - uxu100 - c00*xxu011 - c01*yxu011 - c02*xu11 + uxu011   c10*xxv022  + c11*xv22 - vxv022 - c10*xxv200 - c11*xv00 + vxv200
// ----------------------------------------------------------------------------------------- = ----------------------------------------------------------------
//                                          denA                                                                            denB
//
// c00*xxu322 + c01*yxu322 + c02*xu22 - uxu322 - c00*xxu233 - c01*yxu233 - c02*xu33 + uxu233   c10*xxv311  + c11*xv11 - vxv311 - c10*xxv133 - c11*xv33 + vxv133
// ----------------------------------------------------------------------------------------- = --------------------------------------------------------------------
//                                          denC                                                                            denD

// Multiply by denominators Step1:
// ( c00*xxu100 + c01*yxu100 + c02*xu00 - uxu100 - c00*xxu011 - c01*yxu011 - c02*xu11 + uxu011 ) * denB = ( c10*xxv022  + c11*xv22 - vxv022 - c10*xxv200 - c11*xv00 + vxv200 ) * denA
// ( c00*xxu322 + c01*yxu322 + c02*xu22 - uxu322 - c00*xxu233 - c01*yxu233 - c02*xu33 + uxu233 ) * denD = ( c10*xxv311  + c11*xv11 - vxv311 - c10*xxv133 - c11*xv33 + vxv133 ) * denC

// Multiply by denominators Step2:
// c00*xxu100*denB + c01*yxu100*denB + c02*xu00*denB - uxu100*denB - c00*xxu011*denB - c01*yxu011*denB - c02*xu11*denB + uxu011*denB = c10*xxv022*denA + c11*xv22*denA - vxv022*denA - c10*xxv200*denA - c11*xv00*denA + vxv200*denA
// c00*xxu322*denD + c01*yxu322*denD + c02*xu22*denD - uxu322*denD - c00*xxu233*denD - c01*yxu233*denD - c02*xu33*denD + uxu233*denD = c10*xxv311*denC + c11*xv11*denC - vxv311*denC - c10*xxv133*denC - c11*xv33*denC + vxv133*denC

// Assign:
// bxxu100  = xxu100 * denB
// byxu100  = yxu100 * denB
// buxu100  = uxu100 * denB
// bxxu011  = xxu011 * denB
// byxu011  = yxu011 * denB
// buxu011  = uxu011 * denB

// axxv022  = xxv022 * denA
// avxv022  = vxv022 * denA
// axxv200  = xxv200 * denA
// avxv200  = vxv200 * denA

// dxxu322  = xxu322 * denD
// dyxu322  = yxu322 * denD
// duxu322  = uxu322 * denD
// dxxu233  = xxu233 * denD
// dyxu233  = yxu233 * denD
// duxu233  = uxu233 * denD

// cxxv311  = xxv311 * denC
// cvxv311  = vxv311 * denC
// cxxv133  = xxv133 * denC
// cvxv133  = vxv133 * denC

// Replace previous expression with alias:
// c00*bxxu100 + c01*byxu100 + c02*bxu00 - buxu100 - c00*bxxu011 - c01*byxu011 - c02*bxu11 + buxu011 = c10*axxv022  + c11*axv22 - avxv022 - c10*axxv200 - c11*axv00 + avxv200
// c00*dxxu322 + c01*dyxu322 + c02*dxu22 - duxu322 - c00*dxxu233 - c01*dyxu233 - c02*dxu33 + duxu233 = c10*cxxv311  + c11*cxv11 - cvxv311 - c10*cxxv133 - c11*cxv33 + cvxv133










