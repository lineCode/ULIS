// Copyright 2018-2020 Praxinos, Inc. All Rights Reserved.
// IDDN FR.001.250001.002.S.P.2019.000.00000
/*
*
*   ULIS3
*__________________
*
* @file         srgb2linear.cpp
* @author       Clement Berthaud
* @brief        This file provides the definitions for the srgb2linear functions.
* @copyright    Copyright 2018-2020 Praxinos, Inc. All Rights Reserved.
* @license      Please refer to LICENSE.md
*/
#include "Conv/srgb2linear.h"
#include <cmath>

ULIS3_NAMESPACE_BEGIN
ufloat LUT_sRGBU8_TO_LINEARF[256] = {
    0.f, 0.000303527f, 0.000607054f, 0.000910581f, 0.00121411f, 0.00151763f, 0.00182116f, 0.00212469f, 0.00242822f, 0.00273174f, 0.00303527f,
    0.00334654f, 0.00367651f, 0.00402472f, 0.00439144f, 0.00477695f, 0.00518152f, 0.00560539f, 0.00604883f, 0.00651209f, 0.00699541f, 0.00749903f,
    0.00802319f, 0.00856812f, 0.00913406f, 0.00972122f, 0.0103298f, 0.0109601f, 0.0116122f, 0.0122865f, 0.012983f, 0.0137021f, 0.0144438f, 0.0152085f,
    0.0159963f, 0.0168074f, 0.017642f, 0.0185002f, 0.0193824f, 0.0202886f, 0.021219f, 0.0221739f, 0.0231534f, 0.0241576f, 0.0251869f, 0.0262412f,
    0.0273209f, 0.028426f, 0.0295568f, 0.0307134f, 0.031896f, 0.0331048f, 0.0343398f, 0.0356013f, 0.0368894f, 0.0382044f, 0.0395462f, 0.0409152f,
    0.0423114f, 0.043735f, 0.0451862f, 0.0466651f, 0.0481718f, 0.0497066f, 0.0512695f, 0.0528607f, 0.0544803f, 0.0561285f, 0.0578054f, 0.0595112f,
    0.0612461f, 0.06301f, 0.0648033f, 0.066626f, 0.0684782f, 0.0703601f, 0.0722719f, 0.0742136f, 0.0761854f, 0.0781874f, 0.0802198f, 0.0822827f,
    0.0843762f, 0.0865005f, 0.0886556f, 0.0908417f, 0.093059f, 0.0953075f, 0.0975874f, 0.0998987f, 0.102242f, 0.104616f, 0.107023f, 0.109462f,
    0.111932f, 0.114435f, 0.116971f, 0.119538f, 0.122139f, 0.124772f, 0.127438f, 0.130136f, 0.132868f, 0.135633f, 0.138432f, 0.141263f, 0.144128f,
    0.147027f, 0.14996f, 0.152926f, 0.155926f, 0.158961f, 0.162029f, 0.165132f, 0.168269f, 0.171441f, 0.174647f, 0.177888f, 0.181164f, 0.184475f,
    0.187821f, 0.191202f, 0.194618f, 0.198069f, 0.201556f, 0.205079f, 0.208637f, 0.212231f, 0.215861f, 0.219526f, 0.223228f, 0.226966f, 0.23074f,
    0.234551f, 0.238398f, 0.242281f, 0.246201f, 0.250158f, 0.254152f, 0.258183f, 0.262251f, 0.266356f, 0.270498f, 0.274677f, 0.278894f, 0.283149f,
    0.287441f, 0.291771f, 0.296138f, 0.300544f, 0.304987f, 0.309469f, 0.313989f, 0.318547f, 0.323143f, 0.327778f, 0.332452f, 0.337164f, 0.341914f,
    0.346704f, 0.351533f, 0.3564f, 0.361307f, 0.366253f, 0.371238f, 0.376262f, 0.381326f, 0.38643f, 0.391573f, 0.396755f, 0.401978f, 0.40724f,
    0.412543f, 0.417885f, 0.423268f, 0.428691f, 0.434154f, 0.439657f, 0.445201f, 0.450786f, 0.456411f, 0.462077f, 0.467784f, 0.473532f, 0.47932f,
    0.48515f, 0.491021f, 0.496933f, 0.502887f, 0.508881f, 0.514918f, 0.520996f, 0.527115f, 0.533276f, 0.53948f, 0.545725f, 0.552011f, 0.55834f,
    0.564712f, 0.571125f, 0.577581f, 0.584078f, 0.590619f, 0.597202f, 0.603827f, 0.610496f, 0.617207f, 0.62396f, 0.630757f, 0.637597f, 0.64448f,
    0.651406f, 0.658375f, 0.665387f, 0.672443f, 0.679543f, 0.686685f, 0.693872f, 0.701102f, 0.708376f, 0.715694f, 0.723055f, 0.730461f, 0.737911f,
    0.745404f, 0.752942f, 0.760525f, 0.768151f, 0.775822f, 0.783538f, 0.791298f, 0.799103f, 0.806952f, 0.814847f, 0.822786f, 0.83077f, 0.838799f,
    0.846873f, 0.854993f, 0.863157f, 0.871367f, 0.879622f, 0.887923f, 0.896269f, 0.904661f, 0.913099f, 0.921582f, 0.930111f, 0.938686f, 0.947307f,
    0.955974f, 0.964686f, 0.973445f, 0.982251f, 0.991102f, 1.f
};

ufloat LUT_LINEARU8_TO_sRGBF[256] = {
    0.f, 0.0498401f, 0.0849447f, 0.110702f, 0.131804f, 0.150005f, 0.166186f, 0.180859f, 0.194353f, 0.206896f, 0.218649f, 0.229735f, 0.240247f,
    0.25026f, 0.259833f, 0.269015f, 0.277847f, 0.286361f, 0.294589f, 0.302554f, 0.310278f, 0.31778f, 0.325076f, 0.332181f, 0.339108f, 0.345869f,
    0.352474f, 0.358932f, 0.365252f, 0.371442f, 0.377508f, 0.383458f, 0.389297f, 0.39503f, 0.400663f, 0.4062f, 0.411645f, 0.417003f, 0.422277f,
    0.427471f, 0.432587f, 0.43763f, 0.442601f, 0.447504f, 0.45234f, 0.457113f, 0.461825f, 0.466477f, 0.471071f, 0.47561f, 0.480096f, 0.484529f,
    0.488912f, 0.493246f, 0.497533f, 0.501773f, 0.505969f, 0.510122f, 0.514232f, 0.518301f, 0.522329f, 0.526319f, 0.530271f, 0.534186f, 0.538065f,
    0.541909f, 0.545718f, 0.549494f, 0.553237f, 0.556948f, 0.560628f, 0.564277f, 0.567897f, 0.571487f, 0.575048f, 0.578582f, 0.582088f, 0.585568f,
    0.589021f, 0.592449f, 0.595851f, 0.599229f, 0.602582f, 0.605911f, 0.609218f, 0.612501f, 0.615762f, 0.619001f, 0.622218f, 0.625414f, 0.628589f,
    0.631744f, 0.634878f, 0.637993f, 0.641088f, 0.644164f, 0.647221f, 0.650259f, 0.65328f, 0.656282f, 0.659267f, 0.662235f, 0.665185f, 0.668119f,
    0.671036f, 0.673936f, 0.676821f, 0.67969f, 0.682543f, 0.685381f, 0.688203f, 0.691011f, 0.693804f, 0.696583f, 0.699347f, 0.702097f, 0.704833f,
    0.707556f, 0.710264f, 0.71296f, 0.715642f, 0.718312f, 0.720968f, 0.723612f, 0.726243f, 0.728862f, 0.731469f, 0.734064f, 0.736647f, 0.739218f,
    0.741778f, 0.744326f, 0.746862f, 0.749388f, 0.751902f, 0.754406f, 0.756899f, 0.759381f, 0.761853f, 0.764314f, 0.766765f, 0.769205f, 0.771636f,
    0.774056f, 0.776467f, 0.778868f, 0.78126f, 0.783641f, 0.786014f, 0.788377f, 0.790731f, 0.793075f, 0.795411f, 0.797738f, 0.800056f, 0.802365f,
    0.804665f, 0.806957f, 0.80924f, 0.811515f, 0.813782f, 0.81604f, 0.81829f, 0.820532f, 0.822766f, 0.824993f, 0.827211f, 0.829421f, 0.831624f,
    0.833819f, 0.836007f, 0.838187f, 0.84036f, 0.842525f, 0.844683f, 0.846834f, 0.848978f, 0.851114f, 0.853244f, 0.855366f, 0.857482f, 0.859591f,
    0.861693f, 0.863788f, 0.865877f, 0.867959f, 0.870034f, 0.872103f, 0.874166f, 0.876222f, 0.878272f, 0.880315f, 0.882352f, 0.884383f, 0.886408f,
    0.888427f, 0.89044f, 0.892447f, 0.894448f, 0.896443f, 0.898432f, 0.900416f, 0.902393f, 0.904365f, 0.906332f, 0.908292f, 0.910248f, 0.912197f,
    0.914141f, 0.91608f, 0.918013f, 0.919941f, 0.921864f, 0.923781f, 0.925693f, 0.9276f, 0.929502f, 0.931398f, 0.93329f, 0.935176f, 0.937057f,
    0.938934f, 0.940805f, 0.942672f, 0.944534f, 0.94639f, 0.948242f, 0.95009f, 0.951932f, 0.95377f, 0.955603f, 0.957432f, 0.959256f, 0.961075f,
    0.962889f, 0.9647f, 0.966505f, 0.968307f, 0.970104f, 0.971896f, 0.973684f, 0.975468f, 0.977247f, 0.979022f, 0.980793f, 0.98256f, 0.984322f,
    0.986081f, 0.987835f, 0.989585f, 0.991331f, 0.993073f, 0.994811f, 0.996544f, 0.998274f, 1.f
};

uint8 LUT_sRGBU8_TO_LINEARU8[256] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7,
    7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 22, 22, 23, 23,
    24, 24, 25, 26, 26, 27, 27, 28, 29, 29, 30, 31, 31, 32, 33, 33, 34, 35, 36, 36, 37, 38, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 87,
    88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 128, 129,
    131, 132, 134, 135, 137, 139, 140, 142, 144, 145, 147, 148, 150, 152, 153, 155, 157, 159, 160, 162, 164, 166, 167, 169, 171, 173, 175, 176, 178,
    180, 182, 184, 186, 188, 190, 192, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 218, 220, 222, 224, 226, 228, 230, 232, 235, 237,
    239, 241, 243, 245, 248, 250, 252, 255
};

uint8 LUT_LINEARU8_TO_sRGB8[256] = {
0, 12, 21, 28, 33, 38, 42, 46, 49, 52, 55, 58, 61, 63, 66, 68, 70, 73, 75, 77, 79, 81, 82, 84, 86, 88, 89, 91, 93, 94, 96, 97, 99, 100, 102, 103, 104,
106, 107, 109, 110, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
140, 141, 142, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 151, 152, 153, 154, 155, 156, 157, 157, 158, 159, 160, 161, 161, 162, 163, 164, 165,
165, 166, 167, 168, 168, 169, 170, 171, 171, 172, 173, 174, 174, 175, 176, 176, 177, 178, 179, 179, 180, 181, 181, 182, 183, 183, 184, 185, 185, 186,
187, 187, 188, 189, 189, 190, 191, 191, 192, 193, 193, 194, 194, 195, 196, 196, 197, 197, 198, 199, 199, 200, 201, 201, 202, 202, 203, 204, 204, 205,
205, 206, 206, 207, 208, 208, 209, 209, 210, 210, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221,
222, 222, 223, 223, 224, 224, 225, 226, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 235, 235, 236, 236, 237,
237, 237, 238, 238, 239, 239, 240, 240, 241, 241, 242, 242, 243, 243, 244, 244, 245, 245, 245, 246, 246, 247, 247, 248, 248, 249, 249, 250, 250, 251,
251, 251, 252, 252, 253, 253, 254, 254, 255
};

float srgb2linear( ufloat iValue )
{
    if( iValue <= 0.0f )
        return  0.0f;
    else if( iValue >= 1.0f )
        return  1.0f;
    else if( iValue < 0.04045f )
        return  iValue / 12.92f;
    else
        return  powf( ( iValue + 0.055f) / 1.055f, 2.4f );
}


float linear2srgb( ufloat iValue )
{
    if( iValue <= 0.0f )
        return  0.0f;
    else if( iValue >= 1.0f )
        return  1.0f;
    else if( iValue < 0.0031308f )
        return  iValue * 12.92f;
    else
        return  powf( iValue, 1.0f / 2.4f ) * 1.055f - 0.055f;
}

uint8 fast_srgb2linearU8( uint8 iValue ) { return  LUT_sRGBU8_TO_LINEARU8[ iValue ];    }
uint8 fast_linear2srgbU8( uint8 iValue ) { return  LUT_LINEARU8_TO_sRGB8[ iValue ];     }
ufloat fast_srgb2linearF( uint8 iValue ) { return  LUT_sRGBU8_TO_LINEARF[ iValue ];     }
ufloat fast_linear2srgbF( uint8 iValue ) { return  LUT_LINEARU8_TO_sRGBF[ iValue ];     }
ULIS3_NAMESPACE_END

